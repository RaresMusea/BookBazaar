@using BookBazaarWeb.Areas.Customer.Utils
@model BookBazaar.Models.VM.DetailedOrderBasketViewModel;

@{
    ViewData["Title"] = "My order basket - Book Bazaar";
    var orderBasketList = @Model.OrderBasketList;
    var discounts = @Model.BookDiscounts;
}

<div class="container">
    <h1 class="mt-3">My order basket</h1>
    <form method="post"
          class="mt-4 d-flex justify-content-around align-items-center flex-column flex-sm-column flex-md-row flex-lg-row flex-row">
        <div class="BasketItemsWrapper mb-4">
            @foreach (var cartItem in orderBasketList)
            {
                <div class="BasketCard d-flex align-items-center justify-content-center justify-content-sm-center justify-content-md-center justify-content-lg-between justify-content-xl-between gap-5 flex-row mt-3 flex-wrap">
                    <div class="ContainerWidth d-flex flex-row flex-nowrap align-items-center justify-content-center justify-content-sm-center justify-content-md-center justify-content-lg-center">
                        <img src="@cartItem.Book.CoverImageUrl" alt="Book cover" class="BasketBookCoverImage"/>
                        <span
                            onclick="location.href=`@Url.Action("Details", "Home", new { Id = cartItem.BookId })`"
                            class="OrderBasketLink mx-2">
                            @(cartItem.Book.Title) by
                            @(cartItem.Book.Author.Contains(',') ? cartItem.Book.Author.Split(",")[0] + " et al." : cartItem.Book.Author)
                        </span>
                    </div>
                    <div class="d-flex align-items-center justify-content-center flex-column flex-sm-row flex-md-row flex-lg-column flex-xl-column gap-0 gap-sm-0 gap-md-0 gap-lg-1 gap-xl-1">
                        <span class="fw-bolder @(discounts[cartItem.BookId] > 0.00 ? "text-decoration-line-through" : "")">
                            @((cartItem.Book.Price * cartItem.Items).ToString("0.00")) &euro;
                        </span>
                        @if (Model.BookDiscounts[cartItem.BookId] > 0.00)
                        {
                            <span class="fw-bolder Discount text-center">-@(discounts[cartItem.BookId] * 100)% off</span>
                            <span class="fw-bolder Discount text-center">
                                @((cartItem.Book.Price * cartItem.Items - discounts[cartItem.BookId] * 100).ToString("0.00")) &euro;
                            </span>
                        }
                        <div class="d-flex align-items-center justify-content-center">
                            <div class="OrderItemInteractionButton d-flex align-items-center justify-content-center @(cartItem.Items > 1 ? "d-flex" : "d-none")">
                                <span>-</span>
                            </div>
                            <span>@cartItem.Items</span>
                            <div class="OrderItemInteractionButton d-flex align-items-center justify-content-center @(cartItem.Items + 1 > cartItem.InventoryItem.QuantityInStock ? "d-none" : "d-flex")">
                                <span>+</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="BasketOrderSummary">
            <h3>Order summary</h3>
            <div fw-bolder>
                <div>Books marked for delivery: @(OrderBasketControllerUtils.TotalProducts)</div>
                <span>Total price:</span>
                <span class="@(OrderBasketControllerUtils.DiscountsApplied ? "text-decoration-line-through" : "")">
                    @(OrderBasketControllerUtils.TotalWithoutDiscount.ToString("0.00")) &euro;
                </span>
                <span class="Discount">@OrderBasketControllerUtils.GrandTotal.ToString("0.00") &euro;</span>
                <div>You saved: @(OrderBasketControllerUtils.Savings.ToString("0.00")) &euro;</div>
            </div>
        </div>
    </form>
</div>